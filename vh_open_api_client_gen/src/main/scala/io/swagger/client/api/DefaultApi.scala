/**
 * Sample Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Error
import io.swagger.client.model.MapSights
import io.swagger.client.model.MediaSights
import io.swagger.client.model.Number
import io.swagger.client.model.SightDescription
import io.swagger.client.model.SquareId
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class DefaultApi(val defBasePath: String = "http://localhost:10010/api/v1",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Gets array of objects sights
   * array of sights in current square
   * @param squareId Unique id of the sight. 
   * @return MapSights
   */
  def getMapSights(squareId: String): Option[MapSights] = {
    // create path and map variables
    val path = "/squares/{squareId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "squareId" + "\\}",apiInvoker.escape(squareId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (squareId == null) throw new Exception("Missing required parameter 'squareId' when calling DefaultApi->getMapSights")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[MapSights]).asInstanceOf[MapSights])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Gets array of objects sights
   * array of sights in current square
   * @param sightId sightId 
   * @param authToken auth token (optional)
   * @return SightDescription
   */
  def getMediaSightDescription(sightId: String, authToken: Option[String] = None): Option[SightDescription] = {
    // create path and map variables
    val path = "/sights/{sightId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "sightId" + "\\}",apiInvoker.escape(sightId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (sightId == null) throw new Exception("Missing required parameter 'sightId' when calling DefaultApi->getMediaSightDescription")

    authToken.map(paramVal => queryParams += "authToken" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SightDescription]).asInstanceOf[SightDescription])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Gets array of sorted sights
   * array of sorted sights by poopularity
   * @param sightIds string of sightsids (optional)
   * @param page page number (optional)
   * @param authToken auth token (optional)
   * @return MediaSights
   */
  def getMediaSights(sightIds: Option[String] = None, page: Option[String] = None, authToken: Option[String] = None): Option[MediaSights] = {
    // create path and map variables
    val path = "/sights".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    sightIds.map(paramVal => queryParams += "sightIds" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    authToken.map(paramVal => queryParams += "authToken" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[MediaSights]).asInstanceOf[MediaSights])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get Squares
   * Provide array of squares id
   * @param zoom The value that determines the scale of approximation. (optional)
   * @param latitude Coordinate determining the position of the point on the surface of the Earth relative to the equator in degrees. (optional)
   * @param longitude Coordinate determining the position of the point on the surface of the Earth relative to the zero meridian in degrees. (optional)
   * @return List[SquareId]
   */
  def getSquares(zoom: Option[Number] = None, latitude: Option[Double] = None, longitude: Option[Double] = None): Option[List[SquareId]] = {
    // create path and map variables
    val path = "/squares".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    zoom.map(paramVal => queryParams += "zoom" -> paramVal.toString)
    latitude.map(paramVal => queryParams += "latitude" -> paramVal.toString)
    longitude.map(paramVal => queryParams += "longitude" -> paramVal.toString)
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[SquareId]).asInstanceOf[List[SquareId]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
